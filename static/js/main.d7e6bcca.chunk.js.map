{"version":3,"sources":["Davids.js","addNinja.js","App.js","serviceWorker.js","index.js"],"names":["Ninjas","_ref","ninjas","deleteNinja","ninjaList","map","ninja","react_default","a","createElement","className","key","id","name","time","onClick","AddNinja","state","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","alert","props","addNinja","reset","onSubmit","this","htmlFor","type","onChange","Component","App","ninjaCopy","toConsumableArray","length","concat","filter","Davids","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7e6bcca.chunk.js","sourcesContent":["import React from 'react';\r\nimport './index.css';\r\n\r\n\r\nconst Ninjas = ({ninjas, deleteNinja}) => {\r\n    \r\n   \r\n         \r\n    \r\n    // const ninjaList = ninjas.map(ninja => {\r\n    //     if (ninja.age > 20){\r\n    //     return (\r\n    //         <div className=\"David\" key={ninja.id}>\r\n    //             <div>Name: {ninja.name}</div>\r\n    //             <div>Age: {ninja.age}</div>\r\n    //             <div>Belt: {ninja.belt}</div>\r\n    //         </div>\r\n    //     ) \r\n    //     }\r\n    //     else{\r\n    //         return null;\r\n    //     } \r\n    // })\r\n    const ninjaList = ninjas.map(ninja => {\r\n        return  (   \r\n                <div className=\"David\" key={ninja.id}>\r\n                    <div className = \"task\">Objective: {ninja.name}</div>\r\n                    <div className = \"countdown\">Countdown: {ninja.time}</div>\r\n                    \r\n                    {/* onClick is surrounded by anonymous function so it does not fire every time. */}\r\n                    <div className = \"deleteButton\">\r\n                        <button onClick={() => {deleteNinja(ninja.id)}}><span>Finished</span></button>\r\n                    </div>\r\n                </div>)\r\n                \r\n    })\r\n    return(\r\n        <div className = \"ninja-list\">\r\n            {ninjaList}\r\n        </div>\r\n    );\r\n    \r\n}\r\n\r\nexport default Ninjas;","import React, {Component} from 'react'\r\nimport './index.css';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  \r\n\r\n\r\nclass AddNinja extends Component {\r\n    state ={\r\n        name: null,\r\n        time: null,\r\n        \r\n    }\r\n\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.id]: e.target.value\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.state.name == null ? alert(\"Please put down something to do\") : \r\n        this.state.time == null ? alert(\"please give a time to complete task\"):\r\n        this.props.addNinja(this.state);\r\n        e.target.reset();\r\n     \r\n     \r\n        \r\n        \r\n    }\r\n    render(){\r\n        return ( \r\n            <div>\r\n                <form onSubmit = {this.handleSubmit}>\r\n                    <ul>\r\n                        <li><label className = \"labels\" htmlFor=\"name1\">What do you want to get done?:</label>\r\n                        <input className = \"input1\" type=\"text\" id=\"name\" onChange={this.handleChange} /><span className = \"underline\"></span></li>\r\n                        \r\n                        <li><label className = \"labels\" htmlFor=\"name2\">Approx. time to completion (in days):</label>\r\n                        <input className = \"input2\" type=\"text\" id=\"time\" onChange={this.handleChange} /><span className = \"underline\"></span></li>\r\n                        \r\n                        <li><button className = \"btn\"><span>Submit</span></button></li>\r\n                    </ul>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default AddNinja;","import React, { Component } from 'react';\nimport David from './Davids';\nimport AddNinja from './addNinja';\nimport './index.css';\n\n\n\n\n\n\nclass App extends Component {\n  state = {\n    ninjas : []\n  }\n  /*don't setState outside of state because it is bad practice*/\n  addNinja = (ninja) => {\n    let ninjaCopy = [...this.state.ninjas];\n    ninja.id = ninjaCopy.length + 1;\n    /*adding an element to a copy*/\n    let ninjas = [...this.state.ninjas, ninja];\n    this.setState({\n      ninjas: ninjas\n    })\n   \n\n\n  }\n\n  deleteNinja = (id) => {\n    let ninjas = this.state.ninjas.filter(ninja => {\n      return ninja.id !== id\n    })\n    this.setState({ninjas: ninjas})\n  }\n\n  \n    render() {\n      return (\n        <div className = \"wholeApp\">\n          <div className= \"app\">\n            <div className=\"header\">\n              <h1 className = \"text\">Things To Do</h1>\n              <p className = \"text2\">Lets Get Stuff Done Today :)</p>\n            </div>\n          \n            <div className = \"components\">\n              <AddNinja addNinja={this.addNinja} ninjas={this.state.ninjas}/>\n              \n            </div>\n\n          </div>\n          <div className = \"components2\">\n            \n            <span><David deleteNinja={this.deleteNinja} ninjas={this.state.ninjas}/></span>\n            \n          </div>\n            \n        \n            \n\n        </div>\n        \n        \n      );\n    }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}